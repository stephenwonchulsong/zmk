/*
 * Copyright (c) 2020 The ZMK Contributors
 *

west build -d build/corne_left -p -b nice_nano -- -DSHIELD=corne_left
west build -d build/corne_right -p -b nice_nano -- -DSHIELD=corne_right

docker cp funny_cray:/workspaces/zmk/app/build/corne_left/zephyr/zmk.uf2 ~/Desktop/corne_left.uf2
docker cp funny_cray:/workspaces/zmk/app/build/corne_right/zephyr/zmk.uf2 ~/Desktop/corne_right.uf2

 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

#define default 0
#define lower 1
#define raise 2
#define adjust 3
#define commandllayer 4
#define extra 5
// #define lockhigh 8
&mt {
    tapping-term-ms = <250>;
    flavor = "hold-preferred";
};

&lt {
    tapping-term-ms = <250>;
    flavor = "hold-preferred";
};

/ {
    macros {
        R_1W: R_1W {
            label = "R_1W";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_tap &kp S>
                , <&macro_release &kp LSHFT>
                , <&macro_tap &kp H &kp A &kp W &kp U &kp A &kp J &kp Y &kp D &kp S &kp N>
                ;
        };
        Grader1: GRDR1 {
            label = "GRDR1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&macro_tap &kp B &kp TAB &kp TAB
                &kp 3 &kp TAB &kp TAB
                &kp 3 &kp TAB &kp TAB
                &kp 3 &kp TAB &kp TAB
                &kp 3 &kp TAB &kp TAB
                &kp 3 &kp TAB &kp TAB
                &kp 3 &kp TAB &kp TAB
                &kp 3 &kp TAB &kp TAB
                &kp 3 &kp TAB &kp TAB
                &kp 3 &kp TAB &kp TAB &kp TAB
                &kp SPACE
                >
                ;
        };
        textit: textit {
            label = "textit";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <20>;
            tap-ms = <10>;
            bindings
                = <&macro_tap 
                &kp LBRC &kp LEFT &kp LEFT
                &kp BSLH &kp F &kp K &kp X &kp F &kp L &kp F>
                ,<&macro_press &kp LALT>
                ,<&macro_tap &kp RIGHT &kp RIGHT>
                ,<&macro_release &kp LALT>
                ;
        };
        textbf: textbf {
            label = "textbf";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <20>;
            tap-ms = <10>;
            bindings
                = <&macro_tap 
                &kp LBRC &kp LEFT &kp LEFT
                &kp BSLH &kp F &kp K &kp X &kp F &kp B &kp E>
                ,<&macro_press 
                &kp LALT>
                ,<&macro_tap 
                &kp RIGHT &kp RIGHT>
                ,<&macro_release 
                &kp LALT>
                ;
        };
        LR_PAR: LR_PAR {
            label = "LR_PAR";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_tap &kp N9 &kp N0>
                , <&macro_release &kp LSHFT>
                , <&macro_tap &kp LEFT>
                ;
        };
        lmrgui: lmrgui {
            label = "LAYER_MOD";
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings
                = <&macro_press &mo commandllayer &kp RGUI>
                , <&macro_pause_for_release>
                , <&macro_release &mo commandllayer &kp RGUI>
                ;
        };
        parencite: parencite {
            label = "parencite";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <20>;
            bindings
                = <&macro_tap &kp BSLH &kp R &kp A &kp S &kp K &kp J &kp C &kp L &kp F &kp K>
                , <&macro_tap &kp LBKT &kp RBKT  &kp LBRC &kp RBRC &kp LEFT &kp LEFT &kp LBKT &kp RBKT &kp RIGHT &kp RIGHT>
                ;
        // \(\beta\)
        beta: beta {
            label = "beta";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <30>;
            bindings
                = <&macro_tap &kp BSLH &kp LPAR &kp BSLH &kp B &kp K &kp J &kp A &kp BSLH &kp RPAR>
                ;
        };
        // ($R^2_{adj}$
        radjsq: radjsq {
            label = "radjsq";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <30>;
            bindings
                = <&macro_tap &kp LPAR &kp DLLR>
                , <&macro_press &kp RSHFT> 
                , <&kp S>
                , <&macro_release &kp RSHFT>
                , <&kp AMPS &kp UNDER &kp LBRC &kp A &kp G &kp Y &kp RBRC &kp DLLR>
                ;
        };
    };
    behaviors {
        gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_RGUI|MOD_LSFT|MOD_LALT|MOD_LCTL)>;
        };
        mnl: mouse_n_language {
            compatible = "zmk,behavior-hold-tap";
            label = "MOUSE_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        tns: tap_number_symbols {
            compatible = "zmk,behavior-hold-tap";
            label = "NUM_SYMBOLS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };//the following two go together
        comlpar: comma_parenthesis {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_LPARENTH";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp LPAR>;
            mods = <(MOD_RSFT)>;
        };
        dotrpar: dot_parenthesis {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_RPARENTH";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp RPAR>;
            mods = <(MOD_RSFT)>;
        };//the following two go together        
        comlrpar: comma_parentheses {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_BOTHPARENTH";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&LR_PAR>;
            mods = <(MOD_RSFT)>;
        };
        dotqmark: dot_qmark {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_QMARK";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp QMARK>;
            mods = <(MOD_RSFT)>;
        };
        qtab: q_cmdandtab {
            compatible = "zmk,behavior-mod-morph";
            label = "Q_CMDANDTAB";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp LG(TAB)>;
            mods = <(MOD_LGUI)>;
        };
        tabgui: tabandgui {
            compatible = "zmk,behavior-hold-tap";
            label = "TAB_GUI";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&lmrgui>, <&kp>;
        };
        copypaste: copypaste {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LG(C)>, <&kp LG(V)>, <&kp LG(V)>;
        };
        td_mt_bspc: tap_dance_layer_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&lt lower BSPC>, <&kp BSPC>;
        };
        qlt: quick_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;
        };
    };
};
    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            bindings = <
    &kp TAB      &kp ESC        &kp W        &kp E        &kp R        &kp T       &kp Y       &kp U       &kp I       &kp O     &kp HOME        &kp BSPC
    &kp ESC      &kp Q          &kp S        &mnl extra D  &mnl extra F  &kp G       &kp H       &kp J       &kp K       &kp L    &bhm LCTL P    &kp RET
    &bhm LSHFT Z &kp A          &bhm LCTRL X &bhm LALT C  &bhm LGUI V  &bhm LGUI B &bhm LGUI N &bhm LALT M &comlpar    &dotrpar  &bhm RSHFT SEMI &mt RSHFT FSLH    
                               &qlt lower BSPC &tabgui 0 RET &mkp MB1 &mkp MB2  &kp SPACE &lt raise TAB  
                >;

        };
        lower_layer {
            bindings = <
    &kp TAB  &kp ESC       &kp LC(LA(LG(PG_UP)))    &kp LC(LA(UP))   &kp LG(LC(LA(HOME)))      &kp LG(LS(N5))   &tns AMPS N7 &tns ASTRK N8 &tns LT N9 &kp PLUS  &kp BSPC &kp BSPC 
    &kp ESC  &kp LG(LEFT)       &kp LC(LA(LEFT)) &kp LC(LA(RET))  &kp LC(LA(RIGHT))    &R_1W            &tns DLLR N4 &tns PRCNT N5 &tns CARET N6 &kp MINUS &kp EQUAL &kp EQUAL
    &bhm LSHFT C_VOL_DN      &kp C_VOL_UP &kp LC(LA(LG(PG_DN)))    &kp LC(LA(DOWN)) &kp LG(LC(LA(END)))  &bhm LGUI B      &tns EXCL N1 &tns AT N2    &tns POUND N3 &kp DOT &kp EQUAL &trans
                               &qlt lower BSPC &tabgui 0 RET &mkp MB1 &mkp MB2  &tns RPAR N0 &lt adjust TAB   
                >;
        };
        raise_layer {
            bindings = <
    &kp TAB &kp GRAVE       &kp F2       &kp F3      &kp F4       &kp F5      &kp F6  &kp F7   &kp F8   &kp F9   &kp BSPC &trans
    &kp ESC &kp F1       &none        &none       &none        &none       &none   &kp LEFT &kp UP   &kp DOWN &kp RET &trans
    &bhm LSHFT Z &bhm LSHFT A &bhm LCTRL X &bhm LALT C &bhm LGUI V  &bhm LGUI B  &tns LBRC LBKT &tns RBRC RBKT &kp SQT &kp DQT &kp RIGHT &trans
                               &qlt adjust DEL &tabgui 0 RET &mkp MB1 &mkp MB2  &kp SPACE &lt raise TAB  
                >;
        };
        adjust_layer {
            bindings = <
    &kp TAB &trans &none        &none        &none        &bt BT_CLR_ALL     &kp AMPS &kp ASTRK &LR_PAR  &kp EQUAL &kp UNDER &trans
    &kp ESC &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 3 &out OUT_TOG &bt BT_CLR   &kp DLLR &kp PRCNT &kp CARET &kp UNDER &kp PIPE &trans
    &bhm LSHFT F17    &bhm LSHFT F18 &bhm LCTRL X &bhm LALT C  &bhm LGUI V  &bhm LGUI B &kp EXCL &kp AT    &kp POUND &none &kp BSLH &trans
                               &qlt adjust DEL &tabgui 0 RET &mkp MB1 &mkp MB2  &kp RPAR &lt adjust TAB  
                >;
        };
        commandllayer_layer {
            bindings = <
    &kp TAB &kp GRAVE        &kp W        &kp E        &bhm LSHFT R        &kp T       &kp Y       &kp U       &kp I    &kp O    &kp P &trans
    &kp ESC &kp TAB      &kp S        &kp D        &kp F        &kp G       &kp H       &kp J       &kp K    &kp L    &kp RET &trans
    &bhm LSHFT Z &bhm LSHFT A   &bhm LCTRL X &bhm LALT C  &bhm LGUI V  &bhm LGUI B &bhm LGUI N &bhm LALT M &comlpar &dotrpar &kp SEMI &trans
                               &qlt adjust DEL &tabgui 0 RET &mkp MB1 &mkp MB2  &kp SPACE &lt raise TAB  
                >;
        };
        extra_layer {
            bindings = <
    &kp TAB &kp ESC        &kp W        &kp E        &kp R        &kp T       &kp AMPS    &kp U       &kp I           &kp O     &kp RET &trans
    &kp ESC &kp Q          &bhm LGUI S        &mo extra  &mo extra     &kp G       &kp PG_DN     &kp CAPS       &kp K           &textit    &bhm LCTL P &trans
    &parencite     &kp LC(LEFT)   &bhm LCTRL X &copypaste  &bhm LGUI V  &textbf &kp LBRC &kp RBRC &kp GRAVE &kp SQT  &bhm LSHFT SEMI      &trans
             &qlt lower DEL &kp LS(LC(LA(LG(RET))))   &mkp MB1 &mkp MB2  &kp LS(LC(LA(LG(SPACE))))   &kp LS(LC(LA(LG(TAB))))  
                >;
        };
    };
};
