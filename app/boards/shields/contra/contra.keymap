/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
//west build -p -b nice_nano -- -DSHIELD=contra
//west build -p -b nice_nano -- -DSHIELD=contra -DZMK_CONFIG="/workspaces/zmk/build"

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    macros {
        R_1W: R_1W {
            label = "R_1W";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_tap &kp S>
                , <&macro_release &kp LSHFT>
                , <&macro_tap &kp H &kp A &kp W &kp U &kp A &kp J &kp Y &kp D &kp S &kp N>
                ;
        };
		TempMac: TempMac {
            label = "TempMac";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <30>;
            bindings
                = <&macro_tap  &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp SPACE>
				, <&macro_press &kp LSHFT>
                , <&macro_tap &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB>
                , <&macro_release &kp LSHFT>
				, <&macro_tap &kp N2 &kp TAB &kp TAB &kp TAB &kp TAB &kp N2>
                ;
        };
		FiveTabs: FiveTabs {
            label = "FiveTabs";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <30>;
            bindings
                = <&macro_tap  &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB>
                ;
        };
		FourTabs: FourTabs {
            label = "FourTabs";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <30>;
            bindings
                = <&macro_tap  &kp TAB &kp TAB &kp TAB &kp TAB>
                ;
		};
        // };
		// TwtyFiftn: TwtyFiftn {
        //     label = "TwtyFiftn";
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <30>;
        //     tap-ms = <30>;
        //     bindings
        //         = <&macro_tap &kp S>
		// 		, <&macro_press &kp LSHFT>
        //         , <&macro_tap &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB>
		// 		, <&macro_release &kp LSHFT>
		// 		, <&macro_tap &kp N2 &kp N0>
		// 		, <&macro_tap &kp TAB &kp TAB &kp TAB &kp TAB>
		// 		, <&macro_tap &kp N1 &kp N5>
		// 		, <&macro_tap &kp TAB &kp SPACE>
        //         ;
        // };
		
		TwoTwoOne: TwoTwoOne {
            label = "TwoTwoOne";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <30>;
            bindings
                // = <&macro_press &kp LSHFT>
                // , <&macro_tap &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB>
				// , <&macro_release &kp LSHFT>
				= <&macro_tap &kp N2>
				, <&macro_tap &kp TAB &kp TAB &kp TAB &kp TAB>
				, <&macro_tap &kp N2>
				, <&macro_tap &kp TAB &kp TAB &kp TAB &kp TAB>
				, <&macro_tap &kp N1>
				, <&macro_tap &kp TAB &kp SPACE>
				// , <&macro_wait_time 700>
				// , <&macro_tap &kp Y>
				// , <&macro_tap &kp R>
                ;
        };
		TwoTwoZero: TwoTwoZero {
            label = "TwoTwoZero";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <30>;
            bindings
                // = <&macro_tap &kp S>
				// , <&macro_press &kp LSHFT>
                // , <&macro_tap &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB>
				// , <&macro_release &kp LSHFT>
				= <&macro_tap &kp N2>
				, <&macro_tap &kp TAB &kp TAB &kp TAB &kp TAB>
				, <&macro_tap &kp N2>
				, <&macro_tap &kp TAB &kp TAB &kp TAB &kp TAB>
				, <&macro_tap &kp N0>
				, <&macro_tap &kp TAB &kp SPACE>
				// , <&macro_wait_time 700>
				// , <&macro_tap &kp Y>
				// , <&macro_tap &kp R> 
                ;
        };
		LogicTrim: LogicTrim {
            label = "LogicTrim";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <30>;
            bindings
                = <&macro_press &kp LGUI>
                , <&macro_tap &kp F>
                , <&macro_release &kp LGUI>
				// , <&macro_wait_time 500>
				, <&macro_tap &kp LEFT &kp DEL>
                ;
        };
        LR_PAR: LR_PAR {
            label = "LR_PAR";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_tap &kp N9 &kp N0>
                , <&macro_release &kp LSHFT>
                , <&macro_tap &kp LEFT>
                ;
        };
    };
};


/ {
    behaviors {
        tns: tap_number_symbols {
            compatible = "zmk,behavior-hold-tap";
            label = "NUM_SYMBOLS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
};	

//for grading assignment with 2-2-1 grading rubric
// / {
//     macros {
//         TempMac: TempMac {
//             label = "TempMac";
//             compatible = "zmk,behavior-macro";
//             #binding-cells = <0>;
//             wait-ms = <20>;
//             tap-ms = <20>;
//             bindings
//                 = <&macro_tap  &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp SPACE>
// 				, <&macro_press &kp LSHFT>
//                 , <&macro_tap &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB &kp TAB>
//                 , <&macro_release &kp LSHFT>
// 				, <&macro_tap &kp N2 &kp TAB &kp TAB &kp TAB &kp TAB &kp N2 &kp TAB &kp TAB &kp TAB &kp TAB &kp N1 &kp TAB &kp SPACE>
//                 ;
//         };
//     };
// };

//tapping time
&mt {
    tapping-term-ms = <250>;
};

//define layers
#define DEFAULT 0
#define colemakM 1
#define lower   2
#define raise   3
#define adjust 4
#define shiftl 5
#define extra   6

//cd app
//west build -p -b nice_nano -- -DSHIELD=contra

/ {
    behaviors {
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };
	
	
	keymap {
		compatible = "zmk,keymap";

		default_layer {
				// -----------------------------------------------------------------------------------------
				// |  TAB  |  Q   |  W   |  E   |  R   |  T   |   Y   |  U    |  I   |  O   |   P   | BSPC  |
				// |  ESC  |  A   |  S   |  D   |  F   |  G   |   H   |  J    |  K   |  L   |   ;   |  '    |
				// | SHIFT |  Z   |  X   |  C   |  V   |  B   |   N   |  M    |  ,   |  .   |   /   |  RET  |
				// | FN    | LGUI | LALT | LCTL | LOWR |     SPACE    |  RAIS | LARW | DARW | UARW  |  RARW |
			bindings = <
				&kp TAB        &kp Q    &kp W    &kp E     &kp R     &kp T     &kp Y     &kp U      &kp I     &kp O    &kp P    &kp BSPC
				&lt extra ESC  &kp A   &kp S &kp D &kp F      &kp G     &kp H     &kp J      &kp K     &kp L    &kp SEMI &kp RET
				&mt LSHFT FSLH &bhm LSHFT Z  &bhm LCTL X    &bhm LALT C     &bhm LGUI V     &bhm LGUI B     &bhm LGUI N     &bhm LGUI M      &bhm LALT COMMA &bhm RCTL DOT  &kp UP   &mo shiftl
				&kp GRAVE   &kp LCTL &kp LALT &kp LGUI  &lt lower DEL &kp BSPC   &kp SPACE &lt raise SPACE  &kp CAPS  &kp LEFT &kp DOWN &kp RIGHT
			>;

			// sensor-bindings = <&inc_dec_kp PG_UP PG_DN>;
		};
		colemakM {
		 	bindings = <
		 		&kp TAB        &kp Q    &kp W    &kp F     &kp P    &kp G     &kp Y     &kp L      &kp U     &kp Y     &kp SEMI    &kp BSPC
		 		&lt extra ESC  &kp A    &kp R    &kp S     &kp T     &kp D     &kp H     &kp N      &kp E     &kp I    &kp O &kp RET
				&mt LSHFT FSLH &bhm LSHFT Z  &bhm LCTL X    &bhm LALT C     &bhm LGUI V     &bhm LGUI B     &bhm LGUI K     &bhm LGUI M      &bhm LALT COMMA &bhm RCTL DOT  &kp UP   &mo shiftl
				&to DEFAULT    &kp LCTL &kp LALT &kp LGUI  &lt lower DEL &kp DEL   &kp SPACE &lt raise SPACE  &kp CAPS  &kp LEFT &kp DOWN &kp RIGHT
		 	>;
		 };

		lower {
			bindings = <
				&kp N1 &kp N2       &kp N3       &kp N4     &kp N5         &kp N6   &tns AMPS N7 &tns ASTRK N8 &tns LT N9    &kp N0    &kp PLUS  &trans 
				&trans &trans       &trans       &trans     &LogicTrim     &R_1W    &tns DLLR N4 &tns PRCNT N5 &tns CARET N6 &kp TILDE &kp MINUS &kp EQUAL
                &trans &kp C_VOL_DN &kp C_VOL_UP &kp K_MUTE &kp LG(LS(N5)) &TempMac &tns EXCL N1 &tns AT N2    &tns POUND N3 &kp FSLH  &kp UP    &kp ASTRK
                &kp LG(GRAVE) &trans  &trans     &trans     &trans         &trans   &kp N0 &mo adjust &trans  &kp LEFT      &kp DOWN         &kp RIGHT
			>;

			// sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
		};

		raise {
			bindings = <
				&kp F1 &kp F2       &kp F3       &kp F4     &kp F5     &kp F6 &kp F7 &kp F8   &kp F9   &kp F10   &kp F11   &kp F12
				&trans &trans       &trans       &trans     &trans     &trans &trans &kp LEFT &kp UP   &kp DOWN  &kp RIGHT &trans
                &mt LSHFT FSLH &bhm LSHFT Z  &bhm LCTL X    &bhm LALT C     &bhm LGUI V     &bhm LGUI B &trans &trans   &kp LBKT   &kp RBKT    &kp PG_UP &kp RSHFT
                &trans &trans       &trans       &trans     &mo adjust &trans &trans &trans   &trans   &kp HOME  &kp PG_DN &kp END
			>;
		};
		
		adjust {
			bindings = <
				&kp EXCL &kp AT       &kp POUND    &kp DLLR   &kp PRCNT  &kp CARET    &kp AMPS &kp ASTRK &kp LPAR &kp RPAR &kp UNDER &kp PLUS 
				&trans   &trans       &trans       &trans     &trans     &out OUT_TOG &to colemakM   &trans    &trans   &trans   &trans    &kp BSLH
				&trans   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_CLR &bt BT_NXT &trans       &trans   &trans    &kp LT &kp GT &trans    &trans
				&sys_reset   &bootloader  &trans       &trans     &trans     &trans       &trans   &trans    &trans   &trans   &trans    &trans
			>;
		};
		
		shiftl {
			bindings = <
				&kp RS(TAB)   &kp RS(Q)    &kp RS(W)    &kp RS(E)    &kp RS(R) &kp RS(T)   &kp RS(Y)     &kp RS(U)  &kp RS(I)    &kp RS(O)    &kp RS(P)    &kp RS(BSPC)
				&kp RS(LCTL)  &kp RS(A)    &kp RS(S)    &kp RS(D)    &kp RS(F) &kp RS(G)   &kp RS(H)     &kp RS(J)  &kp RS(K)    &kp RS(L)    &kp RS(SEMI) &kp SQT
				&kp DQT       &kp RS(Z)    &kp RS(X)    &kp RS(C)    &kp RS(V) &kp RS(B)   &kp RS(N)     &kp RS(M)  &LR_PAR      &kp RPAR     &kp QMARK    &kp RS(RSHFT)
				&kp TILDE     &kp RS(LCTL) &kp RS(LALT) &kp RS(LGUI) &none     &kp RS(DEL) &kp RS(SPACE) &none      &kp RS(RALT) &kp RS(LEFT) &kp RS(DOWN) &kp RS(RIGHT)
			>;
		};
		
		extra {
			bindings = <
				&trans &kp LS(LC(TAB)) &kp LG(W)     &kp LC(TAB)   &kp LG(LS(N5))    &trans &kp N7 &kp N8 &kp N9  &kp INS &kp HOME &trans
				&trans &kp LG(LEFT)    &kp LS(LG(F)) &kp LG(RIGHT) &kp LG(D)         &trans &kp N4 &kp N5 &kp N6  &kp DEL &kp END  &trans
                &trans &kp LG(Z)       &kp LG(X)     &kp LG(C)     &kp LA(LS(LG(V))) &trans &kp N1 &kp N2 &kp N3  &trans  &trans   &kp RSHFT
                &trans &trans          &trans        &trans        &trans            &trans &trans &kp N0 &kp DOT &trans  &trans   &trans
			>;
		};
	};
};